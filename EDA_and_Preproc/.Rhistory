runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
runApp('Desktop/Shiny App/NOAA_app')
shiny::runApp('Desktop/NYCDSA/Shiny App/NOAA_app')
brewer.all()
display.brewer.all()
runApp('Desktop/NYCDSA/Shiny App/NOAA_app')
coul -> brewer.pal(9), "Reds")
coul -> brewer.pal(9, "Reds")
coul = brewer.pal(9, "Reds")
colorRampPalette(coul)(15)
coul
runApp('Desktop/NYCDSA/Shiny App/NOAA_app')
runApp('Desktop/NYCDSA/Shiny App/NOAA_app')
data(HairEyeColor)
datasets::(HairEyeColor)
datasets::HairEyeColor
importIntoEnv(HairEyeColor)
head(HairEyeColor)
#1
mosaicplot(HairEyeColor, shade = TRUE)
datasets::HairEyeColor
HairEyeColor %>%
filter(Sex == Female & Eye == brown | blue)
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
## Question #1: Body Temperature
g
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
HairEyeColor %>%
filter(Sex == Female & Eye == brown | blue)
setDF(HairEyeColor)
library(data.table)
setDF(HairEyeColor)
#1
mosaicplot(HairEyeColor, shade = TRUE)
x <- apply(HairEyeColor, c(1, 2), sum)
## More than expected : blond and brown,
x
library(data.table)
datasets::HairEyeColor
#1
mosaicplot(HairEyeColor, shade = TRUE)
x <- apply(HairEyeColor)
x <- apply(HairEyeColor, sum)
## More than expected : blond and brown,
x <- apply(HairEyeColor, Sex)
## More than expected : blond and brown,
x <- apply(HairEyeColor, Sex == F)
## More than expected : blond and brown,
x <- apply(HairEyeColor, Sex == F, sum)
#1
mosaicplot(HairEyeColor, shade = TRUE)
data("HairEyeColor")
as.data.frame('HairEyeColor')
as.data.frame("HairEyeColor")
data("HairEyeColor")
#1
mosaicplot(HairEyeColor, shade = TRUE)
#2
sum(HairEyeColor$Freq)
#2
subset(HairEyeColor, Sex == Female)
#1
mosaicplot(HairEyeColor, shade = TRUE)
#2
head(HairEyeColor)
#2
HairEyeColor
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
title: "Foundations_of_Stats_Homework"
author: "NYC Data Science Academy"
output: html_document
---
library(pander)
library(ggplot2)
library(dplyr)
library(plyr)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#5
var.test(temp$Body.Temp ~ temp$Gender)
data(PlantGrowth)
head(PlantGrowth, 5)
#1
ggplot(data = PlantGrowth, aes(x = group, y = weight)) +
geom_boxplot()
#2
levels(PlantGrowth$group)
ddply(PlantGrowth,~group,summarise,mean=mean(weight),sd=sd(weight))
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
ddply(PlantGrowth,~group,summarise,mean=mean(weight),sd=sd(weight))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#3
# based on the bartlett test, do not reject the NULL. There
# is not a significant difference in variance in weight
# across the different grops
data("HairEyeColor")
mosaicplot(HairEyeColor[,1:2,2],shade = T)
# More: Black hair and brown eye. Blond hair and blue eye.
# Fewer: Blue eye and black hair. Brown hair and blue eye. Blond hair and brown eye.
chisq.test(HairEyeColor[,1:2,2])
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
install.packages('HSAUR')
library(HSAUR)
heptathlon
data = heptathlon
library(ggplot2)
View(data)
plotmatrix(with(data, data.frame(hurdles, highjump, shot, run200m, longjump, javelin, run800m, score )))
library(ggplot2)
plotmatrix(with(data, data.frame(hurdles, highjump, shot, run200m, longjump, javelin, run800m, score )))
plot(data)
return(x - max(data$score))
return( max(data$score)-x)
####################################################### TEMPERATURE
##### converting degrees C into F function
to_f = function(x){
rnge = range(x, na.rm = TRUE)
return(x * (9/5) + 32)
}
rng = range(x, na.rm = TRUE)
trans_ = function(x){
return( max(data$score) - x)
}
trans_(data$hurdles)
data$hurdles = trans_(data$hurdles)
data$run200m = trans_(data$run200m)
data$run800m = trans_(data$run800m)
plot(data)
install.packages('psych')
llibrary(psych)
library(psych)
library(dplyr)
data2 = data %>%
filter(hurdles, highjump,shot, run200m,longjump, javelin,run800m)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
abline(h = 1)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
#######################
#####Tools for PCA#####
#######################
library(psych) #Library that contains helpful PCA functions, such as:
principal() #Performs principal components analysis with optional rotation.
fa.parallel() #Creates scree plots with parallell analyses for choosing K.
factor.plot() #Visualizes the principal component loadings.
############################
#####Data for Example 1#####
############################
bodies = Harman23.cor$cov #Covariance matrix of 8 physical measurements on 305 girls.
bodies
####################
#####Choosing K#####
####################
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
abline(h = 1) #Adding a horizontal line at 1.
abline(h = 1)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
abline(h = 1)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
install.packages(c("psych", "Sleuth2"))
install.packages(c("psych", "Sleuth2"))
####################
#####Choosing K#####
####################
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
#######################
#####Tools for PCA#####
#######################
library(psych) #Library that contains helpful PCA functions, such as:
principal() #Performs principal components analysis with optional rotation.
fa.parallel() #Creates scree plots with parallell analyses for choosing K.
factor.plot() #Visualizes the principal component loadings.
############################
#####Data for Example 1#####
############################
bodies = Harman23.cor$cov #Covariance matrix of 8 physical measurements on 305 girls.
bodies
####################
#####Choosing K#####
####################
fa.parallel(bodies, #The data in question.
n.obs = 305, #Since we supplied a covaraince matrix, need to know n.
fa = "pc", #Display the eigenvalues for PCA.
n.iter = 100) #Number of simulated analyses to perform.
########################
#####Performing PCA#####
########################
pc_bodies = principal(bodies, #The data in question.
nfactors = 2, #The number of PCs to extract.
rotate = "none")
pc_bodies
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
pc_data2= principal(data2, #The data in question.
nfactors = 2, #The number of PCs to extract.
rotate = "none")
pc_data2
plot(pc_data2)
factor.plot(pc_data2,
labels = colnames(data2))
########################################
#####Visualizing & Interpreting PCA#####
########################################
factor.plot(pc_bodies,
labels = colnames(bodies)) #Add variable names to the plot.
View(data2)
View(data2)
head(data2)
data2 = data %>%
filter(hurdles, highjump,shot, run200m,longjump, javelin,run800m)
library(dplyr)
data2 = data %>%
filter(hurdles, highjump,shot, run200m,longjump, javelin,run800m)
data2 = data %>%
filter(hurdles, highjump,shot, run200m,longjump, javelin,run800m)
data2
data2 = data.frame(data$hurdles, data$highjump,data$shot, data$run200m,data$longjump, data$javelin,data$run800m)
head(data2)
head(data2)
fa.parallel(data2,
n.obs = 25,
fa = 'pc',
n.iter = 100)
pc_data2= principal(data2, #The data in question.
nfactors = 2, #The number of PCs to extract.
rotate = "none")
pc_data2
factor.plot(pc_data2,
labels = colnames(data2))
plot(data$score)
factor.plot(data$score)
plot(data$score)
biplot(score.pca)
biplot(pc_data2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(ISLR)
data = OJ
summary(data)
install.packages(c("gbm", "randomForest", "tree"))
library(tree)
attach(Carseats)
##############################
#####Classification Trees#####
##############################
#Loading the tree library for fitting classification and regression trees.
library(tree)
#Loading the ISLR library in order to use the Carseats dataset.
library(ISLR)
#Making data manipulation easier.
help(Carseats)
attach(Carseats)
#Looking at the variable of interest, Sales.
hist(Sales)
summary(Sales)
#Creating a binary categorical variable High based on the continuous Sales
#variable and adding it to the original data frame.
High = ifelse(Sales <= 8, "No", "Yes")
Carseats = data.frame(Carseats, High)
#Fit a tree to the data; note that we are excluding Sales from the formula.
tree.carseats = tree(High ~ . - Sales, split = "gini", data = Carseats)
summary(tree.carseats)
tree.data = tree(Purchase ~ . , split = "gini", data = data)
tree.data
summary(tree.data)
plot(tree.data)
text(tree.data, pretty = 0)
text(plot, pretty = 0)
plot = plot(tree.data)
text(tree.data, ppretty = 0)
text(tree.carseats, pretty = 0)
plot = plot(tree.data)
text(tree.data, pretty = 0)
plot = plot(tree.data)
cv.data = cv.tree(tree.data, FUN = prune.misclass)
cv.data
4. **Visualize: **Visualize your CV results plotting misclassified observations against:
+ terminal nodes
+ alpha values
```{r}
par(mfrow = c(1, 2))
plot(cv.data$size, cv.data$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.data$k, cv.data$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
```
par(mfrow = c(1, 1))
prune.data = prune.misclass(tree.data, best = 4)
plot(prune.data)
text(prune.data, pretty = 0)
plot(prune.data)
library(randomForest)
rf.data
set.seed(0)
rf.data = randomForest(Purchase ~ ., data = data, subset = train, importance = TRUE)
rf.data = randomForest(Purchase ~ ., data = data,  importance = TRUE)
rf.data = randomForest(Purchase ~ ., data = data,  importance = TRUE)
rf.data
---
title: "Tree_Methods_HW"
author: "NYC Data Science Academy"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
```
library(ISLR)
data = OJ
summary(data)
library(tree)
summary(tree.data)
text(tree.data, pretty = 0)
plot = plot(tree.data)
set.seed(0)
cv.data = cv.tree(tree.data, FUN = prune.misclass)
names(cv.data)
cv.data
par(mfrow = c(1, 2))
plot(cv.data$size, cv.data$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.data$k, cv.data$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
plot(cv.data$size, cv.data$dev, type = "b",
xlab = "Terminal Nodes", ylab = "Misclassified Observations")
plot(cv.data$k, cv.data$dev, type  = "b",
xlab = "Alpha", ylab = "Misclassified Observations")
par(mfrow = c(1, 1))
prune.data = prune.misclass(tree.data, best = 4)
plot(prune.data)
library(randomForest)
rf.data = randomForest(Purchase ~ ., data = data,  importance = TRUE)
rf.data
oob.err = numeric(13)
for (mtry in 1:13) {
fit = randomForest(medv ~ ., data = data[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
}
fit = randomForest(medv ~ ., data = data[data, ], mtry = mtry)
fit = randomForest(medv ~ ., data = data[data, ], mtry = mtry)
fit = randomForest(Purchase ~ ., data = data[train, ], mtry = mtry)
oob.err[mtry] = fit$mse[500]
cat("We're performing iteration", mtry, "\n")
rf.data = randomForest(Purchase ~ ., data = data, subset = train,  importance = TRUE)
rf.data
rf.data = randomForest(Purchase ~ ., data = data,  importance = TRUE)
rf.data
fit = randomForest(Purchase ~ ., data = data, mtry = mtry)
oob.err[mtry] = fit$mse[500]
oob.err[mtry] = fit$error.rate[500, 1]
cat("We're performing iteration", mtry, "\n")
library(ggplot2)
library(plotly)
weapons = read.csv('weapon_carry.csv')
setwd("~/Desktop/Capstone_Proj/EDA_and_Preproc")
weapons = read.csv('weapon_carry.csv')
violence = read.csv('violence.csv')
bullied = read.csv('bullied.csv')
weapons.head
head(weapons)
head(violence)
head(bullied)
summary(weapons)
ggplot(weapons) + geom_bar(aes(x = Gun_carry))
ggplot(weapons) +
geom_col(aes(x = Gun_carry, y = n, fill = Sex)) +
scale_fill_manual(values = ecols)
ggplot(weapons) +
geom_col(aes(x = Gun_carry, y = n, fill = Sex))
ggplot(weapons) +
geom_col(aes(x = Gun_carry, fill = Sex))
agg = count(weapons, Gun_carry)
library(dplyr)
agg = count(weapons, Gun_carry)
head(agg)
agg = count_(weapons, names(weapons))
head(agg)
xtabs(n ~ Gun_carry + Sex + raceeth, data = agg)
xtb = table(weapons)
ggplot(weapons) +
geom_bar(aes(x = Gun_carry))
ggplot(weapons) +
geom_col(aes(x = Gun_carry, y = n, fill = Sex))
ggplot(weapons) +
geom_col(aes(x = Gun_carry))
ggplot(weapons) +
geom_bar(aes(x = Gun_carry))
ggplot(weapons) +
geom_bar(aes(x = Gun_carry, fill = Sex))
prop.table(svytable(~weapons$Sex, design = weapons$weight))
prop.table(~weapons$Sex, design = weapons$weight)
ggplot(weapons) +
geom_bar(aes(x = Gun_carry, fill = Sex, position="dodge"))
ggplot(weapons, aes(x = Gun_carry, fill = Sex)) +
geom_bar(position ="dodge"))
ggplot(weapons, aes(x = Gun_carry, fill = Sex)) +
geom_bar(position ="dodge")
weapons = weapons %>%
filter(Gun_carry != "1")
weapons
agg = count(weapons, Gun_carry)
ggplot(weapons, aes(x = Gun_carry, fill = Sex)) +
geom_bar(position ="dodge")
q = ggplot(weapons, aes(x = Gun_carry, fill = Sex)) +
geom_bar(position ="dodge")
p = ggplot(weapons, aes(x = oth_weapon, fill = Sex)) +
geom_bar(position ="dodge")
p
p = ggplot(weapons, aes(x = oth_weapons, fill = Sex)) +
geom_bar(position ="dodge")
p
weapons2 = weapons %>%
filter(Gun_carry != "1")
weapons2
weapons = weapons %>%
filter(Gun_carry & oth_weapons != "1")
weapons
q = ggplot(weapons, aes(x = Gun_carry, fill = Sex)) +
geom_bar(position ="dodge")
q
p = ggplot(weapons, aes(x = oth_weapons, fill = Sex)) +
geom_bar(position ="dodge")
p
r = ggplot(weapons, mapping = aes(x = Gun_carry, y = weight)) +
geom_bar()
r
r = ggplot(weapons, mapping = aes(x = Gun_carry, y = weight)) +
geom_point()
r
r = ggplot(weapons, mapping = aes(x = Gun_carry, y = weight)) +
geom_box()
r = ggplot(weapons, mapping = aes(x = Gun_carry, y = weight)) +
geom_boxplot()
r
p
weapons %>%
ggplot(aes(x=Gun_carry, y = weight, fill = Sex)) +
geom_boxplot()
